services:
  postgres:
    image: postgres:15-alpine
    container_name: nebula_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: nebula_ai
      POSTGRES_PASSWORD: nebula_ai
      POSTGRES_DB: nebula_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - nebula_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nebula_ai"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nebula_app
    restart: unless-stopped
    ports:
      - "3001:3001"
    env_file:
      - .env.docker
    environment:
      NODE_ENV: production
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: nebula_ai
      DATABASE_PASSWORD: nebula_ai
      DATABASE_NAME: nebula_db
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: 7d
      GROQ_API_KEY: ${GROQ_API_KEY}
      DEFAULT_AI_MODEL: ${DEFAULT_AI_MODEL}
      PORT: 3001
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - nebula_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: nebula_nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
    networks:
      - nebula_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  nebula_network:
    driver: bridge

volumes:
  postgres_data: